* Project Stoa

** Project Status
*** [ ] create an example language, Stox, based on Crafting Interpreters
*** [ ] create a malleable language framework for exploring language ideas

** Example Languages
*** Stox
**** Code Structure
#+begin_src shell :results none
make graphics
#+end_src

[[./images/stox-code.png]]

**** Build Status
#+begin_src sh :exports both :results verbatim
make stox
#+end_src

#+RESULTS:
: CLI Building entry: stox.ts
: CLI Using tsconfig: ../tsconfig.json
: CLI tsup v6.1.2
: CLI Target: node14
: CJS Build start
: CJS ⚡️ Build success in 41ms
: CJS ../bin/stox.js     49.77 KB
: CJS ../bin/stox.js.map 109.67 KB

**** Usage Documentation
#+begin_src sh :exports both :results verbatim
./bin/stox --help
#+end_src

#+RESULTS:
#+begin_example
Usage: node ./bin/stox.js [options] [file]
Show this help message
    --help
prints version info and exits
    -v, --version
prints parse tree and exits
    -p, --parse
prints tokens and exits
    -t, --tokens
runs the repl
    -r, --repl

#+end_example

**** Current Version
#+begin_src sh :exports both :results verbatim
./bin/stox -v
#+end_src

#+RESULTS:
: stox-2022.07.31

**** Code Coverage

#+begin_src sh :exports both :results verbatim
make coverage-stox
#+end_src

#+RESULTS:
#+begin_example

=============================== Coverage summary ===============================
Statements   : 90.67% ( 846/933 )
Branches     : 74.64% ( 318/426 )
Functions    : 93.62% ( 191/204 )
Lines        : 91.07% ( 735/807 )
================================================================================
------------------|---------|----------|---------|---------|----------------------------------------
File              | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
------------------|---------|----------|---------|---------|----------------------------------------
All files         |   90.67 |    74.64 |   93.62 |   91.07 |
 lib/repl-kit     |      40 |      100 |       0 |   33.33 |
  index.ts        |      40 |      100 |       0 |   33.33 | 2-4
 lib/stoa-ltk     |   97.33 |    90.19 |   95.74 |    97.5 |
  language.ts     |   97.82 |    90.47 |     100 |     100 | 21,60
  parser.ts       |   92.85 |    73.91 |   84.61 |   91.66 | 10-13,82
  reporter.ts     |     100 |      100 |     100 |     100 |
  runtime.ts      |     100 |      100 |     100 |     100 |
  tokenizer.ts    |   98.16 |    96.42 |     100 |   97.87 | 216-217
 stox/src         |   87.14 |    67.98 |   95.79 |   88.22 |
  cli-app.ts      |   84.21 |    84.61 |       0 |   88.23 | 32-33
  interpreter.ts  |   81.52 |     67.3 |   96.42 |   82.57 | ...151,168,185,203-205,214,216,231-237
  parser.ts       |   86.34 |    64.66 |   97.05 |   87.96 | ...163-167,241,342-347,396,419,425-437
  printer.ts      |   91.52 |     62.5 |      96 |   90.38 | 48-54
  repl.ts         |     100 |      100 |     100 |     100 |
  resolver.ts     |   95.06 |       85 |   96.42 |   95.89 | 46,115,152
  stox-lang.ts    |     100 |      100 |     100 |     100 |
  tokenizer.ts    |     100 |      100 |     100 |     100 |
 stox/src/ast     |   97.77 |      100 |   95.23 |   96.96 |
  declarations.ts |     100 |      100 |     100 |     100 |
  expressions.ts  |     100 |      100 |     100 |     100 |
  nodes.ts        |     100 |      100 |     100 |     100 |
  statements.ts   |    92.3 |      100 |   85.71 |   89.47 | 25-26
  visitor.ts      |     100 |      100 |     100 |     100 |
 stox/src/runtime |   92.45 |    76.31 |   85.71 |   89.18 |
  control-flow.ts |   94.44 |       50 |      75 |   91.66 | 7
  environment.ts  |   90.47 |       75 |     100 |   84.61 | 17,23
  globals.ts      |      75 |      100 |      50 |      75 | 7
  values.ts       |     100 |      100 |     100 |     100 |
------------------|---------|----------|---------|---------|----------------------------------------
#+end_example

The latest uploaded code-coverage reports are at: https://khtdr.com/stoa/coverage

**** Test Suite Status

#+begin_src sh :exports both :results verbatim
make test-stox
#+end_src

#+RESULTS:
#+begin_example
Testing: arithmetic.stox
✔✔✔✔✔✔
Testing: bad-token.stox
✔✔✔✔✔✔
Testing: closures.stox
✔✔✔✔✔✔
Testing: comments.stox
✔✔✔✔✔✔
Testing: divide-by-zero.stox
✔✔✔✔✔✔
Testing: fib.stox
✔✔✔✔✔✔
Testing: functions.stox
✔✔✔✔✔✔
Testing: global-redefine.stox
✔✔✔✔✔✔
Testing: hello-world.stox
✔✔✔✔✔✔
Testing: literals.stox
✔✔✔✔✔✔
Testing: logical-ternary.stox
✔✔✔✔✔✔
Testing: name.stox
✔✔✔✔✔✔
Testing: same-names.stox
✔✔✔✔✔✔
Testing: scope.stox
✔✔✔✔✔✔
Testing: semantic-return.stox
✔✔✔✔✔✔
Testing: sticky-precision.stox
✔✔✔✔✔✔
Testing: version.stox
✔✔✔✔✔✔

Passing: 102 out of 102 (100%)
Failing: 0 out of 102 (0%)

#+end_example

**** Potential Goals
- full stack from sql to hover effects
- lsp compatible
- actually use it to create
- minimize user function writing with string/date/number primitives

* ...
** clean
src_elisp[:results none]{(save-excursion (org-goto-line 1) (+org/remove-result-blocks t))}
** build
src_elisp[:results none]{(save-excursion (org-goto-line 1) (org-babel-execute-subtree))}
