* Project Stoa

** Project Status
*** [ ] create a malleable language framework for exploring language ideas

** Build Status
#+begin_src sh :exports both :results verbatim
make build
#+end_src

#+RESULTS:
#+begin_example
npx tsup --keep-names --no-splitting \
	         --out-dir ./bin src/stoa.ts \
	         --sourcemap
CLI Building entry: src/stoa.ts
CLI Using tsconfig: tsconfig.json
CLI tsup v6.1.2
CLI Target: node14
CJS Build start
CJS ⚡️ Build success in 81ms
CJS bin/stoa.js     161.81 KB
CJS bin/stoa.js.map 300.73 KB
#+end_example

** Usage Documentation
#+begin_src sh :exports both :results verbatim
./bin/stoa --help
#+end_src

#+RESULTS:
#+begin_example
Usage: node ./bin/stoa.js [options] [file]
Show this help message
    --help
prints version info and exits
    -v
prints parse tree and exits
    -p
prints tokens and exits
    -t

#+end_example

** Current Version
#+begin_src sh :exports both :results verbatim
./bin/stoa -v
#+end_src

#+RESULTS:
: stoa-2022.07.20

** Code Structure
#+begin_src shell :results none
make graph
#+end_src

[[./dependency-graph.png]]


** Test Suite Status

#+begin_src sh :exports both :results verbatim
make test
#+end_src

#+RESULTS:
#+begin_example
./bin/test-tokenizer.sh
Testing tokenizer snapshots
✔ arithmetic.stoa
✔ closures.stoa
✔ divide-by-zero.stoa
✔ fib.stoa
✔ functions.stoa
✔ global-redefine.stoa
✔ hello-world.stoa
✔ literals.stoa
✔ name.stoa
✔ same-names.stoa
✔ scope.stoa
✔ semantic-return.stoa
✔ sticky-precision.stoa
Passing: 13 Failing: 0

./bin/test-parser.sh
Snapshotting the parse tree
✔ arithmetic.stoa
✔ closures.stoa
✔ divide-by-zero.stoa
✔ fib.stoa
✔ functions.stoa
✔ global-redefine.stoa
✔ hello-world.stoa
✔ literals.stoa
✔ name.stoa
✔ same-names.stoa
✔ scope.stoa
✔ semantic-return.stoa
✔ sticky-precision.stoa
Passing: 13 Failing: 0

./bin/test-evaluator.sh
Testing the evaluator (with parse errors)
✔ arithmetic.stoa
✔ closures.stoa
✔ divide-by-zero.stoa
✔ fib.stoa
✔ functions.stoa
✔ global-redefine.stoa
✔ hello-world.stoa
✔ literals.stoa
✔ name.stoa
✔ same-names.stoa
✔ scope.stoa
✔ semantic-return.stoa
✔ sticky-precision.stoa
Passing: 13 Failing: 0
#+end_example


** Code Coverage

#+begin_src sh :exports both :results verbatim
make coverage
#+end_src

#+RESULTS:
#+begin_example
npx nyc --extends "@istanbuljs/nyc-config-typescript" \
	        --exclude-after-remap \
	        --reporter html --reporter text --reporter text-summary \
            make silent-test
------------------|---------|----------|---------|---------|----------------------------------------
File              | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
------------------|---------|----------|---------|---------|----------------------------------------
All files         |   81.74 |    65.88 |   89.83 |   81.98 |
 src              |    80.3 |    62.08 |   91.47 |    81.4 |
  ast.ts          |     100 |      100 |     100 |     100 |
  errors.ts       |     100 |      100 |     100 |     100 |
  interpreter.ts  |   71.14 |       50 |   89.28 |   74.78 | ...116,124-131,148,159-165,173,188-194
  parser.ts       |   77.02 |    64.56 |   96.87 |   77.83 | ...259-264,273-275,329-334,383,406-424
  printer.ts      |   83.05 |     62.5 |      88 |   80.76 | 44-50,56,69-72
  resolver.ts     |   89.87 |       90 |   89.28 |    91.3 | 91-97,111-113
  runtime.ts      |   95.45 |       50 |      80 |     100 | 21-22
  scanner.ts      |     100 |      100 |     100 |     100 |
  stoa.ts         |   86.48 |       75 |     100 |   86.11 | 18-19,31,45-46
 src/ast          |    88.5 |      100 |      85 |   84.37 |
  declarations.ts |     100 |      100 |     100 |     100 |
  expressions.ts  |   84.31 |      100 |   81.81 |   78.94 | 62-64,70-74
  statements.ts   |    92.3 |      100 |   85.71 |   89.47 | 25-26
  visitor.ts      |     100 |      100 |     100 |     100 |
 src/lib          |   81.33 |    69.86 |   85.71 |   82.03 |
  cli.ts          |     100 |      100 |     100 |     100 |
  parser.ts       |   84.37 |       60 |   81.81 |   80.76 | 10,27,52-53,62
  repl.ts         |     100 |      100 |     100 |     100 |
  reporter.ts     |      50 |        0 |       0 |   33.33 | 9-10
  tokenizer.ts    |   81.08 |       75 |   93.75 |   83.33 | 57-58,66-68,150-162,181-182
 src/runtime      |   91.42 |    79.41 |      90 |      88 |
  environment.ts  |   90.47 |       75 |     100 |   84.61 | 17,23
  globals.ts      |      75 |      100 |      50 |      75 | 7
  values.ts       |     100 |      100 |     100 |     100 |
------------------|---------|----------|---------|---------|----------------------------------------

=============================== Coverage summary ===============================
Statements   : 81.74% ( 712/871 )
Branches     : 65.88% ( 253/384 )
Functions    : 89.83% ( 168/187 )
Lines        : 81.98% ( 610/744 )
================================================================================
#+end_example

The latest uploaded report is at: https://khtdr.com/stoa/coverage/


** Potential Goals
- full stack from sql to hover effects
- lsp compatible
- actually use it to create
- minimize user function writing with string/date/number primitives

* ...
** build
src_elisp[:results none]{;(save-excursion (org-goto-line 1) (org-babel-execute-subtree))}
** clean
src_elisp[:results none]{;(save-excursion (org-goto-line 1) (+org/remove-result-blocks t))}
