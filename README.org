* Project Stoa
** Goals
- full stack from sql to hover effects
- self-containing state?
- lsp compatible
- actually use it to create
- minimize user function writing with string/date/number primitives

** Project Status
ü§£ if you aren't me, why are you here?
*** create a malleable language
:in-progress:

** Build Status
#+begin_src sh :exports both :results verbatim
make build
#+end_src

#+RESULTS:
: npx tsup --keep-names --no-splitting \
: 	         --out-dir ./bin src/stoa.ts
: CLI Building entry: src/stoa.ts
: CLI Using tsconfig: tsconfig.json
: CLI tsup v6.1.2
: CLI Target: node14
: CJS Build start
: CJS ‚ö°Ô∏è Build success in 61ms
: CJS bin/stoa.js 159.45 KB

** Usage Documentation
#+begin_src sh :exports both :results verbatim
./bin/stoa --help
#+end_src

#+RESULTS:
#+begin_example
Usage: node ./bin/stoa.js [options] [file]
Show this help message
    --help
Launches a colorful REPL
    -r, --repl
Emits the parse tree (CST/JSON)
    -p, --parse
Emits the list of tokens (JSON)
    -t, --tokenize
Displays the version and exits
    -v, --version

#+end_example

** Current Version
#+begin_src sh :exports both :results verbatim
./bin/stoa -v
#+end_src

#+RESULTS:
: stoa-2022.07.20 {
:   author: 'Kay Oh <khtdr.com@gmail.com>',
:   description: 'language framework',
:   repository: 'https://github.com/khtdr/stoa',
:   license: 'UNLICENSED'
: }

** Test Suite Status
#+begin_src sh :exports both :results verbatim
make test
#+end_src

#+RESULTS:
#+begin_example
./tests/run.sh
‚úî arithmetic.stoa
‚úî closures.stoa
‚úî fib.stoa
‚úî functions.stoa
‚úî hello-world.stoa
‚úî literals.stoa
‚úî name.stoa
‚ùå scope.stoa
diff <(scope.stoa) scope.stoa.txt
3c3
< BBB
---
> AAA
‚úî sticky-precision.stoa
Passing: 8 Failing: 1
#+end_example

* ...
** build
src_elisp[:results none]{(save-excursion (org-goto-line 1) (org-babel-execute-subtree))}
** clean
src_elisp[:results none]{(save-excursion (org-goto-line 1) (+org/remove-result-blocks t))}
