* Project Stoa

** Project Status
*** [ ] create an example language based on Crafting Interpreters called =Stox=
*** [ ] create a malleable language framework for exploring language ideas

** Example Languages
*** Stox
**** Code Structure
#+begin_src shell :results none
make graphics
#+end_src

[[./images/stox-code.png]]

**** Build Status
#+begin_src sh :exports both :results verbatim
make clean all
#+end_src

#+RESULTS:
#+begin_example
rm -rf node_modules
rm -rf coverage
rm -f ./bin/stox.js
pnpm install
Progress: resolved 0, reused 1, downloaded 0, added 0
Packages: +300
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Progress: resolved 320, reused 300, downloaded 0, added 300, done

devDependencies:
+ @istanbuljs/nyc-config-typescript 1.0.2
+ @types/node 14.18.21
+ dependency-cruiser 11.13.0
+ nodemon 2.0.19
+ nyc 15.1.0
+ opts 2.0.2
+ tsup 6.1.2
+ typescript 4.7.4

Done in 1.3s
CLI Building entry: lib/repl-kit/index.ts
CLI Using tsconfig: tsconfig.json
CLI tsup v6.1.2
CLI Target: node14
CJS Build start
CJS ⚡️ Build success in 22ms
CJS packages/repl-kit/index.js     4.90 KB
CJS packages/repl-kit/index.js.map 12.82 KB
DTS Build start
DTS ⚡️ Build success in 452ms
DTS packages/repl-kit/index.d.ts 236.00 B
CLI Building entry: stox.ts
CLI Using tsconfig: tsconfig.json
CLI tsup v6.1.2
CLI Target: node14
CJS Build start
CJS ⚡️ Build success in 21ms
CJS bin/stox.js     32.75 KB
CJS bin/stox.js.map 119.90 KB
#+end_example

**** Usage Documentation
#+begin_src sh :exports both :results verbatim
./bin/stox --help
#+end_src

#+RESULTS:
#+begin_example
Usage: node ./bin/stox.js [options] [file]
Show this help message
    --help
prints version info and exits
    -v, --version
prints parse tree and exits
    -p, --parse
prints tokens and exits
    -t, --tokens
runs the repl
    -r, --repl

#+end_example

**** Current Version
#+begin_src sh :exports both :results verbatim
./bin/stox -v
#+end_src

#+RESULTS:
: stox-2022.08.15

**** Code Coverage

#+begin_src sh :exports both :results verbatim
make coverage
#+end_src

#+RESULTS:
#+begin_example
make[1]: Entering directory '/home/ubuntu/projects/stoa'
make[1]: Leaving directory '/home/ubuntu/projects/stoa'

=============================== Coverage summary ===============================
Statements   : 87.84% ( 802/913 )
Branches     : 75.75% ( 350/462 )
Functions    : 79.02% ( 211/267 )
Lines        : 87.11% ( 703/807 )
================================================================================
------------------|---------|----------|---------|---------|-----------------------------------
File              | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
------------------|---------|----------|---------|---------|-----------------------------------
All files         |   87.84 |    75.75 |   79.02 |   87.11 |
 lib/repl-kit     |   19.78 |        0 |       2 |   14.45 |
  errors.ts       |     100 |      100 |     100 |     100 |
  history.ts      |      50 |      100 |   16.66 |   44.44 | 5-18
  index.ts        |   22.22 |      100 |       0 |    12.5 | 5-24
  key-bindings.ts |    3.44 |        0 |       0 |    3.44 | 8-78
  term.ts         |   66.66 |      100 |       0 |   66.66 | 46
  ui.ts           |   15.78 |        0 |       0 |    9.09 | 4-15,20-40,47-106
 lib/stoa-ltk     |   98.33 |    92.07 |   95.74 |   98.12 |
  language.ts     |     100 |    95.23 |     100 |     100 | 60
  parser.ts       |   95.23 |       75 |   84.61 |   94.28 | 13,84
  reporter.ts     |     100 |      100 |     100 |     100 |
  runtime.ts      |     100 |      100 |     100 |     100 |
  tokenizer.ts    |   98.82 |    98.14 |     100 |   98.66 | 216
 stox             |    94.2 |     75.6 |   98.42 |   94.61 |
  cli-app.ts      |   88.23 |       80 |       0 |    87.5 | 34-35
  interpreter.ts  |   91.85 |    76.69 |     100 |    92.5 | 78,92,106,108,134,150,218,227,229
  parser.ts       |   93.62 |    72.66 |   97.14 |    94.5 | 17,54,174-175,263,364,441,447-459
  printer.ts      |   96.82 |       80 |     100 |   96.36 | 55-56
  repl.ts         |     100 |      100 |     100 |     100 |
  resolver.ts     |     100 |       85 |     100 |     100 | 45,119,158
  stox-lang.ts    |     100 |      100 |     100 |     100 |
  tokenizer.ts    |     100 |      100 |     100 |     100 |
 stox/ast         |      99 |       90 |     100 |     100 |
  declarations.ts |     100 |      100 |     100 |     100 |
  expressions.ts  |   98.24 |       90 |     100 |     100 | 53
  nodes.ts        |     100 |      100 |     100 |     100 |
  statements.ts   |     100 |      100 |     100 |     100 |
  visitor.ts      |     100 |      100 |     100 |     100 |
 stox/runtime     |   89.83 |    81.57 |      85 |   86.66 |
  classes.ts      |   78.57 |       50 |   66.66 |      75 | 16,25,30
  control-flow.ts |     100 |       75 |     100 |     100 | 7
  environment.ts  |      90 |    82.14 |     100 |   84.61 | 17,23
  globals.ts      |   66.66 |      100 |      50 |   66.66 | 7
  values.ts       |     100 |      100 |     100 |     100 |
------------------|---------|----------|---------|---------|-----------------------------------
#+end_example

The latest uploaded code-coverage reports are at: https://khtdr.com/stoa/coverage

**** Test Suite Status

#+begin_src sh :exports both :results verbatim
make test
#+end_src

#+RESULTS:
#+begin_example
Testing: arithmetic.stox
✔✔✔✔✔✔
Testing: bad-token.stox
✔✔✔✔✔✔
Testing: class-syntax.stox
✔✔✔✔✔✔
Testing: closures.stox
✔✔✔✔✔✔
Testing: comments.stox
✔✔✔✔✔✔
Testing: divide-by-zero.stox
✔✔✔✔✔✔
Testing: fib.stox
✔✔✔✔✔✔
Testing: functions.stox
✔✔✔✔✔✔
Testing: global-redefine.stox
✔✔✔✔✔✔
Testing: hello-world.stox
✔✔✔✔✔✔
Testing: literals.stox
✔✔✔✔✔✔
Testing: logical-ternary.stox
✔✔✔✔✔✔
Testing: name.stox
✔✔✔✔✔✔
Testing: same-names.stox
✔✔✔✔✔✔
Testing: scope.stox
✔✔✔✔✔✔
Testing: semantic-return.stox
✔✔✔✔✔✔
Testing: sticky-precision.stox
✔✔✔✔✔✔
Testing: triforce.stox
✔✔✔✔✔✔
Testing: version.stox
✔✔✔✔✔✔

Passing: 114 out of 114 (100%)
Failing: 0 out of 114 (0%)

#+end_example

**** Potential Goals
- full stack from sql to hover effects
- lsp compatible
- actually use it to create
- minimize user function writing with string/date/number primitives

* ...
** clean
src_elisp[:results none]{(save-excursion (org-goto-line 1) (+org/remove-result-blocks t))}
** build
src_elisp[:results none]{(save-excursion (org-goto-line 1) (org-babel-execute-subtree))}
