* Project Stoa

** Project Status
*** [ ] create a malleable language framework for exploring language ideas

** Build Status
#+begin_src sh :exports both :results verbatim
make build
#+end_src

#+RESULTS:
: CLI Building entry: src/stoa.ts
: CLI Using tsconfig: tsconfig.json
: CLI tsup v6.1.2
: CLI Target: node14
: CJS Build start
: CJS ⚡️ Build success in 37ms
: CJS bin/stoa.js     49.02 KB
: CJS bin/stoa.js.map 104.91 KB

** Usage Documentation
#+begin_src sh :exports both :results verbatim
./bin/stoa --help
#+end_src

#+RESULTS:
#+begin_example
Usage: node ./bin/stoa.js [options] [file]
Show this help message
    --help
prints version info and exits
    -v, --version
prints parse tree and exits
    -p, --parse
prints tokens and exits
    -t, --tokens
runs the repl
    -r, --repl

#+end_example

** Current Version
#+begin_src sh :exports both :results verbatim
./bin/stoa -v
#+end_src

#+RESULTS:
: stoa-2022.07.29

** Code Coverage

#+begin_src sh :exports both :results verbatim
make coverage
#+end_src

#+RESULTS:
#+begin_example
------------------|---------|----------|---------|---------|----------------------------------------
File              | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
------------------|---------|----------|---------|---------|----------------------------------------
All files         |   88.94 |    71.19 |   94.02 |   89.55 |
 lib/stoa-ltk     |    91.2 |    78.57 |   91.48 |   91.62 |
  language.ts     |    90.9 |    84.21 |     100 |   92.85 | 53-55
  parser.ts       |   82.85 |    52.63 |   76.92 |   79.31 | 10-13,30,55-56,69
  reporter.ts     |     100 |      100 |     100 |     100 |
  tokenizer.ts    |   92.03 |    84.48 |   94.44 |   92.78 | 61-62,70-72,195-196
 src              |   86.63 |    66.78 |   95.16 |   87.92 |
  ast.ts          |     100 |      100 |     100 |     100 |
  interpreter.ts  |   81.52 |     67.3 |   96.42 |   84.25 | ...126-132,147,164,179-181,189,204-210
  parser.ts       |   84.14 |    63.15 |   94.11 |   85.64 | ...149,159-163,237,338-343,392,415-433
  printer.ts      |   91.52 |     62.5 |      96 |   90.38 | 44-50
  resolver.ts     |   95.06 |       85 |   96.42 |   95.89 | 41,110,147
  runtime.ts      |   95.45 |       50 |      80 |     100 | 21-22
  scanner.ts      |     100 |      100 |     100 |     100 |
  stoa.ts         |      90 |    81.81 |     100 |   88.88 | 36-37
 src/ast          |    97.7 |      100 |      95 |   96.87 |
  declarations.ts |     100 |      100 |     100 |     100 |
  expressions.ts  |     100 |      100 |     100 |     100 |
  statements.ts   |    92.3 |      100 |   85.71 |   89.47 | 25-26
  visitor.ts      |     100 |      100 |     100 |     100 |
 src/runtime      |   91.42 |    79.41 |      90 |      88 |
  environment.ts  |   90.47 |       75 |     100 |   84.61 | 17,23
  globals.ts      |      75 |      100 |      50 |      75 | 7
  values.ts       |     100 |      100 |     100 |     100 |
------------------|---------|----------|---------|---------|----------------------------------------

=============================== Coverage summary ===============================
Statements   : 88.94% ( 813/914 )
Branches     : 71.19% ( 299/420 )
Functions    : 94.02% ( 189/201 )
Lines        : 89.55% ( 703/785 )
================================================================================
#+end_example

The latest uploaded report is at: https://khtdr.com/stoa/coverage/

** Code Structure
#+begin_src shell :results none
make graph
#+end_src

[[./images/archi.png]]

[[./images/dependency-graph.png]]


** Test Suite Status

#+begin_src sh :exports both :results verbatim
make test
#+end_src

#+RESULTS:
#+begin_example
Testing: arithmetic.stoa
✔✔✔✔✔✔
Testing: closures.stoa
✔✔✔✔✔✔
Testing: comments.stoa
✔✔✔✔✔✔
Testing: divide-by-zero.stoa
✔✔✔✔✔✔
Testing: fib.stoa
✔✔✔✔✔✔
Testing: functions.stoa
✔✔✔✔✔✔
Testing: global-redefine.stoa
✔✔✔✔✔✔
Testing: hello-world.stoa
✔✔✔✔✔✔
Testing: literals.stoa
✔✔✔✔✔✔
Testing: logical-ternary.stoa
✔✔✔✔✔✔
Testing: name.stoa
✔✔✔✔✔✔
Testing: same-names.stoa
✔✔✔✔✔✔
Testing: scope.stoa
✔✔✔✔✔✔
Testing: semantic-return.stoa
✔✔✔✔✔✔
Testing: sticky-precision.stoa
✔✔✔✔✔✔

Passing: 90 out of 90 (100%)
Failing: 0 out of 90 (0%)

#+end_example


** Potential Goals
- full stack from sql to hover effects
- lsp compatible
- actually use it to create
- minimize user function writing with string/date/number primitives

* ...
** clean
src_elisp[:results none]{(save-excursion (org-goto-line 1) (+org/remove-result-blocks t))}
** build
src_elisp[:results none]{(save-excursion (org-goto-line 1) (org-babel-execute-subtree))}
