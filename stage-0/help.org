#+TITLE: stage-0

Move the parentheses inward..
#+BEGIN_SRC elisp
(defun factorial (n)
   (if (= n 0) 1
       (* n (factorial (- n 1)))))
#+END_SRC

Becomes:
#+BEGIN_SRC
def(factorial n
   if(=(n 0) 1
       *(n factorial(-(n 1)))))
#+END_SRC

And:
#+BEGIN_SRC elisp
(defun factorial (n)
   (loop for i from 1 to n
         for fac = 1 then (* fac i)
         finally (return fac)))
#+END_SRC

Becomes:
#+BEGIN_SRC
def(factorial [n]
    <-(1 fac).
    for(i 1 +(n 1)
        ->(fac *(fac i))))
#+END_SRC


#+BEGIN_SRC ebnf
program = expressions.
expressions = expression ("." expressions)*.
expression = value|variable|fn-call.
value = number.
number = digit+.
variable = letter (letter|digit)*.
fn-call = (builtin|variable) "(" args ")"
builtin = math-ops|comp-op|assign-ops|control-flow
math-ops = "+"|"-"|"*"|"/"
comp-ops = "="|"<"|">"
assign-ops = "->"|"<-"|"def"
control-flow = "if"|"for"
args = expression*
digit  = '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'.
letter = 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|
         'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|
         'U'|'V'|'W'|'X'|'Y'|'Z'|'a'|'b'|'c'|'d'|
         'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|
         'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|
         'y'|'z'.
#+END_SRC

** Basic Types
- true false       =boolean=
- 1 2 3 4 12,345   =integer=
- 1.0 1,200,433.65 =float=
- "string"         =string=
- variable-name    =reference=

** Structure Types
*** Lists [...]
[1 2 3]
[:a :b :c "abc" [1 2 3]]
*** Maps {...}
{"key1" "value1" 4 2}
*** Sets <...>
<"key1" "value1" 4 2>

** Function Calls
variable-name(arg1 arg2 arg3)

** Assignment
pi -> 3.14
3.14 <- pi
([args], body)

** Examples
factorial -> ( n
  if( =(n 0) 1
    *(n factorial( -(n 1) ))))
