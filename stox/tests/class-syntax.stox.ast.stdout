(program 
   (class Breakfast
      (fun cook (let [food] (block 
         (print (+ (+ "Fried eggs and " food) "."))
      )))
      (fun serve (let [who] (block 
         (print (+ (+ "Enjoy, " who) "."))
      )))
   )
   (class Bagel
      
   )
   (var bagel (call Bagel))
   (.set bagel isReady false)
   (print (?: (.get bagel isReady) "Bagel is ready" "... still toasting..."))
   (.set bagel isReady true)
   (print (?: (.get bagel isReady) "Bagel is ready" "... still toasting..."))
   (class Standard
      
   )
   (var object (call Standard))
   (.set object name "Standard")
   (.set object meal (call Breakfast))
   (var newBagel (call Bagel))
   (.set (.get object meal) toast newBagel)
   (.set (.get (.get object meal) toast) isReady false)
   (print (?: (.get newBagel isReady) "Bagel is ready" "... still toasting..."))
   (.set newBagel isReady true)
   (print (?: (.get (.get (.get object meal) toast) isReady) "Bagel is ready" "... still toasting..."))
   (call (.get (.get object meal) cook) (.get (.get object meal) toast))
   (call (.get (.get object meal) serve) "customer")
   (class Bacon
      (fun eat (let [] (block 
         (print "Crunch crunch crunch")
      )))
   )
   (call (.get (call Bacon) eat))
)
